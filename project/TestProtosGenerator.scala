import sbt._
import sbt.Keys._
import sbtprotoc.ProtocPlugin.autoImport.PB

object TestProtosGenerator {
  val protoBase =
    """syntax = "proto2";
      |
      |// DO NOT EDIT. Generated by project/TestProtosGenerator.scala
      |
      |package e2e.cats;
      |
      |import "validate/validate.proto";
      |import "cats/types.proto";
      |""".stripMargin

  case class Vars(typ: String, mapKey: Boolean = true, elem: String)

  def template(v: Vars) =
    s"""message CatsTest${v.typ.capitalize} {
       |  repeated ${v.typ} set               = 1             [(validate.rules).repeated = { unique: true }];
       |  repeated ${v.typ} non_empty_set     = 2             [(validate.rules).repeated = { min_items: 1, unique: true }];
       |  repeated ${v.typ} non_empty_list    = 3             [(validate.rules).repeated = { min_items: 1 }];
       |  ${if (!v.mapKey) "// "
      else
        ""}map<${v.typ}, int32> non_empty_map_key = 4          [(validate.rules).map = { min_pairs: 1 }];
       |  map<int32, ${v.typ}> non_empty_map_value = 5        [(validate.rules).map = { min_pairs: 1 }];
       |}""".stripMargin

  val types = Seq(
    Vars("int32", elem = "1"),
    Vars("int64", elem = "2L"),
    Vars("uint32", elem = "3"),
    Vars("uint64", elem = "4L"),
    Vars("sfixed32", elem = "5"),
    Vars("sfixed64", elem = "6L"),
    Vars("string", elem = "\"str\""),
    Vars(
      "bytes",
      mapKey = false,
      elem = "com.google.protobuf.ByteString.copyFrom(Array[Byte]())"
    ),
    Vars("double", mapKey = false, elem = "13.21"),
    Vars("float", mapKey = false, elem = "3.14f"),
    Vars("Color", mapKey = false, elem = "e2e.cats.types.Color.RED"),
    Vars("SubMsg", mapKey = false, elem = "e2e.cats.types.SubMsg()")
  )

  def makeInstance(v: Vars): String =
    s"""|  val ${v.typ} = CatsTest${v.typ.capitalize}(
        |    set=Set(${v.elem}),
        |    nonEmptySet=NonEmptySet.of(${v.elem}),
        |    nonEmptyList=NonEmptyList.of(${v.elem}),${if (v.mapKey)
        s"""
        |    nonEmptyMapKey=NonEmptyMap.of(${v.elem} -> 17),"""
      else ""}
        |    nonEmptyMapValue=NonEmptyMap.of(17 -> ${v.elem})
        |  )"""

  val instances =
    s"""|package e2e.cats.alltypes
        |
        |import cats.data._
        |
        |object instances {
        ${types.map(makeInstance).mkString("\n")}
        |  val all: Seq[scalapb.GeneratedMessage] = Seq(${types
         .map(_.typ)
         .mkString(", ")})
        |}""".stripMargin

  val generateAllTypesProto = taskKey[Seq[File]]("Generates alltypes.proto")

  def generateAllTypesProtoSettings = Seq(
    generateAllTypesProto := {
      val protoContent = protoBase + types.map(template).mkString("\n")
      val protoFile =
        (Compile / sourceManaged).value / "protobuf" / "alltypes.proto"
      IO.write(protoFile, protoContent)
      Seq(protoFile)
    },
    (Compile / sourceGenerators) += Def.task {
      val scalaFile =
        (Compile / sourceManaged).value / "alltypes" / "instances.scala"
      IO.write(scalaFile, instances)
      Seq(scalaFile)
    },
    Compile / PB.generate :=
      (Compile / PB.generate dependsOn TestProtosGenerator.generateAllTypesProto).value
  )
}
